{"version":3,"sources":["components/ProgressBar/ProgressBar.js","components/ProgressBar/index.js","components/TextInput/TextInput.js","components/TextInput/index.js","components/Label/Label.js","components/Label/index.js","components/PasswordInput/PasswordInput.js","components/PasswordInput/index.js","components/EyeIcon/EyeIcon.js","components/EyeIcon/index.js","../config/componentData.js","docs/examples/EyeIcon/Example.js","docs/examples/Label/LabelOptional.js","docs/examples/Label/LabelRequired.js","docs/examples/PasswordInput/ExampleAllFeatures.js","docs/examples/ProgressBar/Example100Percent.js","docs/examples/ProgressBar/Example10Percent.js","docs/examples/ProgressBar/Example70Percent.js","docs/examples/TextInput/ExampleError.js","docs/examples/TextInput/ExampleOptional.js","components/HelloWorld/HelloWorld.js","docs/examples/HelloWorld/ExampleHelloWorld.js","components/RegistrationForm/RegistrationForm.js","docs/examples/RegistrationForm/ExampleAllFeatures.js","docs/examples sync /^/.//.*$","docs/Navigation.js","docs/CodeExample.js","docs/Example.js","docs/Props.js","docs/ComponentPage.js","docs/Docs.js","index.js"],"names":["ProgressBar","getColor","percent","props","getWidthAsPercentOfTotalWidth","parseInt","width","this","height","style","border","backgroundColor","React","Component","defaultProps","TextInput","htmlId","name","label","type","required","onChange","placeholder","value","error","children","marginBottom","Label","htmlFor","id","className","color","display","PasswordInput","toggleShowPassword","event","setState","prevState","showPassword","preventDefault","state","maxLength","showVisibilityToggle","quality","href","onClick","marginLeft","EyeIcon","length","xmlns","viewBox","transform","fill","d","cx","cy","r","module","exports","EyeIconExample","ExampleOptional","ExampleRequired","ExampleAllFeatures","password","target","minLength","getQuality","Example100Percent","Example10Percent","Example70Percent","ExampleError","HelloWorld","message","ExampleHelloWorld","RegistrationForm","user","onSubmit","validate","submitted","email","errors","minPasswordLength","Object","getOwnPropertyNames","confirmationMessage","passwordQuality","ExampleRegistrationForm","console","log","map","webpackContext","req","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","resolve","Navigation","components","key","CodeExample","hljs","registerLanguage","javascript","highlightBlock","element","ref","Example","toggleCode","showCode","example","description","ExampleComponent","require","componentName","default","Props","defaultValue","ComponentPage","component","examples","Docs","route","window","location","hash","substr","addEventListener","componentData","filter","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d4a30984.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass ProgressBar extends React.Component {\n  getColor = percent => {\n    if (this.props.percent === 100) return \"green\";\n    return this.props.percent > 50 ? \"lightgreen\" : \"red\";\n  };\n\n  getWidthAsPercentOfTotalWidth = () => {\n    return parseInt(this.props.width * (this.props.percent / 100), 10);\n  };\n\n  render() {\n    const { percent, width, height } = this.props;\n    return (\n      <div style={{ border: \"solid 1px lightgray\", width: width }}>\n                \n        <div\n          style={{\n            width: this.getWidthAsPercentOfTotalWidth(),\n            height,\n            backgroundColor: this.getColor(percent)\n          }}\n        />\n              \n      </div>\n    );\n  }\n}\n\nProgressBar.propTypes = {\n  /** Percent of progress completed */\n  percent: PropTypes.number.isRequired,\n\n  /** Bar width */\n  width: PropTypes.number.isRequired,\n\n  /** Bar height */\n  height: PropTypes.number\n};\n\nProgressBar.defaultProps = {\n  height: 5\n};\n\nexport default ProgressBar;\n","export { default } from \"./ProgressBar\";\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Label from \"../Label\";\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nfunction TextInput({\n  htmlId,\n  name,\n  label,\n  type = \"text\",\n  required = false,\n  onChange,\n  placeholder,\n  value,\n  error,\n  children,\n  ...props\n}) {\n  return (\n    <div style={{ marginBottom: 16 }}>\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <input\n        id={htmlId}\n        type={type}\n        name={name}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        style={error && { border: \"solid 1px red\" }}\n        {...props}\n      />\n      {children}\n      {error && (\n        <div className=\"error\" style={{ color: \"red\" }}>\n          {error}\n        </div>\n      )}\n    </div>\n  );\n}\n\nTextInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n\n  /** Input label */\n  label: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf([\"text\", \"number\", \"password\"]),\n\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** Value */\n  value: PropTypes.any,\n\n  /** String to display when error occurs */\n  error: PropTypes.string,\n\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInput;\n","export { default } from \"./TextInput\";\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n/** Label with required field display, htmlFor, and block styling */\nfunction Label({ htmlFor, label, required }) {\n  return (\n    <label style={{ display: \"block\" }} htmlFor={htmlFor}>\n      {label} {required && <span style={{ color: \"red\" }}> *</span>}\n    </label>\n  );\n}\n\nLabel.propTypes = {\n  /** HTML ID for associated input */\n  htmlFor: PropTypes.string.isRequired,\n\n  /** Label text */\n  label: PropTypes.string.isRequired,\n\n  /** Display asterisk after label if true */\n  required: PropTypes.bool\n};\n\nexport default Label;\n","export { default } from \"./Label\";\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ProgressBar from \"../ProgressBar\";\nimport EyeIcon from \"../EyeIcon\";\nimport TextInput from \"../TextInput\";\n\n/** Password input with integrated label, quality tips, and show password toggle. */\nclass PasswordInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showPassword: false\n    };\n  }\n\n  toggleShowPassword = event => {\n    this.setState(prevState => {\n      return { showPassword: !prevState.showPassword };\n    });\n    if (event) event.preventDefault();\n  };\n\n  render() {\n    const {\n      htmlId,\n      value,\n      label,\n      error,\n      onChange,\n      placeholder,\n      maxLength,\n      showVisibilityToggle,\n      quality,\n      ...props\n    } = this.props;\n    const { showPassword } = this.state;\n\n    return (\n      <TextInput\n        htmlId={htmlId}\n        label={label}\n        placeholder={placeholder}\n        type={showPassword ? \"text\" : \"password\"}\n        onChange={onChange}\n        value={value}\n        maxLength={maxLength}\n        error={error}\n        required\n        {...props}\n      >\n        {showVisibilityToggle && (\n          <a\n            href=\"#\"\n            onClick={this.toggleShowPassword}\n            style={{ marginLeft: 5 }}\n          >\n            <EyeIcon />\n          </a>\n        )}\n        {value.length > 0 && quality && (\n          <ProgressBar percent={quality} width={130} />\n        )}\n      </TextInput>\n    );\n  }\n}\n\nPasswordInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\n  name: PropTypes.string.isRequired,\n\n  /** Password value */\n  value: PropTypes.any,\n\n  /** Input label */\n  label: PropTypes.string,\n\n  /** Function called when password input value changes */\n  onChange: PropTypes.func.isRequired,\n\n  /** Max password length accepted */\n  maxLength: PropTypes.number,\n\n  /** Placeholder displayed when no password is entered */\n  placeholder: PropTypes.string,\n\n  /** Set to true to show the toggle for displaying the currently entered password */\n  showVisibilityToggle: PropTypes.bool,\n\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\n  quality: PropTypes.number,\n\n  /** Validation error to display */\n  error: PropTypes.string\n};\n\nPasswordInput.defaultProps = {\n  maxLength: 50,\n  showVisibilityToggle: false,\n  label: \"Password\"\n};\n\nexport default PasswordInput;\n","export {default} from './PasswordInput';\n","import React from \"react\";\n\n/** SVG Eye Icon */\nfunction EyeIcon() {\n  // Attribution: Fabián Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\n  return (\n    <svg\n      width=\"16\"\n      height=\"16\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 22 22\"\n    >\n      <g transform=\"matrix(.02146 0 0 .02146 1 1)\" fill=\"#4d4d4d\">\n        <path d=\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\" />\n        <circle cx=\"466.08\" cy=\"466.02\" r=\"134.5\" />\n      </g>\n    </svg>\n  );\n}\n\nexport default EyeIcon;\n","export { default } from \"./EyeIcon\";\n","module.exports = [{\n  \"name\": \"EyeIcon\",\n  \"description\": \"SVG Eye Icon\",\n  \"code\": \"import React from \\\"react\\\";\\n\\n/** SVG Eye Icon */\\nfunction EyeIcon() {\\n  // Attribution: Fabián Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\\n  return (\\n    <svg\\n      width=\\\"16\\\"\\n      height=\\\"16\\\"\\n      xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n      viewBox=\\\"0 0 22 22\\\"\\n    >\\n      <g transform=\\\"matrix(.02146 0 0 .02146 1 1)\\\" fill=\\\"#4d4d4d\\\">\\n        <path d=\\\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\\\" />\\n        <circle cx=\\\"466.08\\\" cy=\\\"466.02\\\" r=\\\"134.5\\\" />\\n      </g>\\n    </svg>\\n  );\\n}\\n\\nexport default EyeIcon;\\n\",\n  \"examples\": [{\n    \"name\": \"Example\",\n    \"description\": \"\",\n    \"code\": \"import React from \\\"react\\\";\\nimport EyeIcon from \\\"react-lib-nikmargit/EyeIcon\\\";\\n\\nexport default function EyeIconExample() {\\n  return <EyeIcon />;\\n}\\n\"\n  }]\n}, {\n  \"name\": \"HelloWorld\",\n  \"description\": \"\",\n  \"props\": {\n    \"message\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Message to display\",\n      \"defaultValue\": {\n        \"value\": \"\\\"World\\\"\",\n        \"computed\": false\n      }\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\nimport PropTypes from \\\"prop-types\\\";\\n\\nfunction HelloWorld({ message }) {\\n  return <div>Hello {message}</div>;\\n}\\n\\nHelloWorld.propTypes = {\\n  /** Message to display */\\n  message: PropTypes.string\\n};\\n\\nHelloWorld.defaultProps = {\\n  /** Message to display */\\n  message: \\\"World\\\"\\n};\\n\\nexport default HelloWorld;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleHelloWorld\",\n    \"description\": \"Custom message\",\n    \"code\": \"import React from \\\"react\\\";\\n\\nimport HelloWorld from \\\"react-lib-nikmargit/HelloWorld\\\";\\n\\n/**\\n * Custom message\\n */\\nexport default function ExampleHelloWorld() {\\n  return <HelloWorld message=\\\"this is a test\\\"></HelloWorld>;\\n}\\n\"\n  }]\n}, {\n  \"name\": \"Label\",\n  \"description\": \"Label with required field display, htmlFor, and block styling\",\n  \"props\": {\n    \"htmlFor\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"HTML ID for associated input\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Label text\"\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Display asterisk after label if true\"\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\nimport PropTypes from \\\"prop-types\\\";\\n\\n/** Label with required field display, htmlFor, and block styling */\\nfunction Label({ htmlFor, label, required }) {\\n  return (\\n    <label style={{ display: \\\"block\\\" }} htmlFor={htmlFor}>\\n      {label} {required && <span style={{ color: \\\"red\\\" }}> *</span>}\\n    </label>\\n  );\\n}\\n\\nLabel.propTypes = {\\n  /** HTML ID for associated input */\\n  htmlFor: PropTypes.string.isRequired,\\n\\n  /** Label text */\\n  label: PropTypes.string.isRequired,\\n\\n  /** Display asterisk after label if true */\\n  required: PropTypes.bool\\n};\\n\\nexport default Label;\\n\",\n  \"examples\": [{\n    \"name\": \"LabelOptional\",\n    \"description\": \"Optional label\",\n    \"code\": \"import React from \\\"react\\\";\\nimport Label from \\\"react-lib-nikmargit/Label\\\";\\n\\n/** Optional label */\\nexport default function ExampleOptional() {\\n  return <Label htmlFor=\\\"test\\\" label=\\\"test\\\" />;\\n}\\n\"\n  }, {\n    \"name\": \"LabelRequired\",\n    \"description\": \"Required label\",\n    \"code\": \"import React from \\\"react\\\";\\nimport Label from \\\"react-lib-nikmargit/Label\\\";\\n\\n/** Required label */\\nexport default function ExampleRequired() {\\n  return <Label htmlFor=\\\"test\\\" label=\\\"test\\\" required />;\\n}\\n\"\n  }]\n}, {\n  \"name\": \"PasswordInput\",\n  \"description\": \"Password input with integrated label, quality tips, and show password toggle.\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input name. Recommend setting this to match object's property so a single change handler can be used by convention.\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Password value\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Input label\",\n      \"defaultValue\": {\n        \"value\": \"'Password'\",\n        \"computed\": false\n      }\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function called when password input value changes\"\n    },\n    \"maxLength\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Max password length accepted\",\n      \"defaultValue\": {\n        \"value\": \"50\",\n        \"computed\": false\n      }\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder displayed when no password is entered\"\n    },\n    \"showVisibilityToggle\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Set to true to show the toggle for displaying the currently entered password\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"quality\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Display password quality visually via ProgressBar, accepts a number between 0 and 100\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Validation error to display\"\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport ProgressBar from '../ProgressBar';\\nimport EyeIcon from '../EyeIcon';\\nimport TextInput from '../TextInput';\\n\\n/** Password input with integrated label, quality tips, and show password toggle. */\\nclass PasswordInput extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      showPassword: false\\n    }\\n  }\\n\\n  toggleShowPassword = event => {\\n    this.setState(prevState => {\\n      return { showPassword: !prevState.showPassword };\\n    });\\n    if (event) event.preventDefault();\\n  }\\n\\n  render() {\\n    const { htmlId, value, label, error, onChange, placeholder, maxLength, showVisibilityToggle, quality, ...props } = this.props;\\n    const { showPassword } = this.state;\\n\\n    return (\\n      <TextInput\\n        htmlId={htmlId}\\n        label={label}\\n        placeholder={placeholder}\\n        type={showPassword ? 'text' : 'password'}\\n        onChange={onChange}\\n        value={value}\\n        maxLength={maxLength}\\n        error={error}\\n        required\\n        {...props}>\\n        {\\n          showVisibilityToggle &&\\n          <a\\n            href=\\\"#\\\"\\n            onClick={this.toggleShowPassword}\\n            style={{ marginLeft: 5 }}>\\n            <EyeIcon />\\n          </a>\\n        }\\n        {\\n          value.length > 0 && quality && <ProgressBar percent={quality} width={130} />\\n        }\\n      </TextInput>\\n    );\\n  }\\n}\\n\\nPasswordInput.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\\n  name: PropTypes.string.isRequired,\\n\\n  /** Password value */\\n  value: PropTypes.any,\\n\\n  /** Input label */\\n  label: PropTypes.string,\\n\\n  /** Function called when password input value changes */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Max password length accepted */\\n  maxLength: PropTypes.number,\\n\\n  /** Placeholder displayed when no password is entered */\\n  placeholder: PropTypes.string,\\n\\n  /** Set to true to show the toggle for displaying the currently entered password */\\n  showVisibilityToggle: PropTypes.bool,\\n\\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\\n  quality: PropTypes.number,\\n\\n  /** Validation error to display */\\n  error: PropTypes.string\\n};\\n\\nPasswordInput.defaultProps = {\\n  maxLength: 50,\\n  showVisibilityToggle: false,\\n  label: 'Password'\\n};\\n\\nexport default PasswordInput;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleAllFeatures\",\n    \"description\": \"All features enabled\",\n    \"code\": \"import React from \\\"react\\\";\\nimport PasswordInput from \\\"react-lib-nikmargit/PasswordInput\\\";\\n\\n/** All features enabled */\\nclass ExampleAllFeatures extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n    this.state = {\\n      password: \\\"\\\"\\n    };\\n  }\\n\\n  getQuality() {\\n    const length = this.state.password.length;\\n    return length > 10 ? 100 : length * 10;\\n  }\\n\\n  render() {\\n    return (\\n      <div>\\n        <PasswordInput\\n          htmlId=\\\"password-input-example-all-features\\\"\\n          name=\\\"password\\\"\\n          onChange={event => this.setState({ password: event.target.value })}\\n          value={this.state.password}\\n          minLength={8}\\n          placeholder=\\\"Enter password\\\"\\n          showVisibilityToggle\\n          quality={this.getQuality()}\\n          {...this.props}\\n        />\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default ExampleAllFeatures;\\n\"\n  }]\n}, {\n  \"name\": \"ProgressBar\",\n  \"description\": \"\",\n  \"props\": {\n    \"percent\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": true,\n      \"description\": \"Percent of progress completed\"\n    },\n    \"width\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": true,\n      \"description\": \"Bar width\"\n    },\n    \"height\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Bar height\",\n      \"defaultValue\": {\n        \"value\": \"5\",\n        \"computed\": false\n      }\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\nimport PropTypes from \\\"prop-types\\\";\\n\\nclass ProgressBar extends React.Component {\\n  getColor = percent => {\\n    if (this.props.percent === 100) return \\\"green\\\";\\n    return this.props.percent > 50 ? \\\"lightgreen\\\" : \\\"red\\\";\\n  };\\n\\n  getWidthAsPercentOfTotalWidth = () => {\\n    return parseInt(this.props.width * (this.props.percent / 100), 10);\\n  };\\n\\n  render() {\\n    const { percent, width, height } = this.props;\\n    return (\\n      <div style={{ border: \\\"solid 1px lightgray\\\", width: width }}>\\n                \\n        <div\\n          style={{\\n            width: this.getWidthAsPercentOfTotalWidth(),\\n            height,\\n            backgroundColor: this.getColor(percent)\\n          }}\\n        />\\n              \\n      </div>\\n    );\\n  }\\n}\\n\\nProgressBar.propTypes = {\\n  /** Percent of progress completed */\\n  percent: PropTypes.number.isRequired,\\n\\n  /** Bar width */\\n  width: PropTypes.number.isRequired,\\n\\n  /** Bar height */\\n  height: PropTypes.number\\n};\\n\\nProgressBar.defaultProps = {\\n  height: 5\\n};\\n\\nexport default ProgressBar;\\n\",\n  \"examples\": [{\n    \"name\": \"Example100Percent\",\n    \"description\": \"100% progress and height 20px\",\n    \"code\": \"import React from \\\"react\\\";\\nimport ProgressBar from \\\"react-lib-nikmargit/ProgressBar\\\";\\n\\n/** 100% progress and height 20px */\\nexport default function Example100Percent() {\\n  return <ProgressBar percent={100} width={150} height={20} />;\\n}\\n\"\n  }, {\n    \"name\": \"Example10Percent\",\n    \"description\": \"10% progress\",\n    \"code\": \"import React from \\\"react\\\";\\nimport ProgressBar from \\\"react-lib-nikmargit/ProgressBar\\\";\\n\\n/** 10% progress */\\nexport default function Example10Percent() {\\n  return <ProgressBar percent={10} width={150} />;\\n}\\n\"\n  }, {\n    \"name\": \"Example70Percent\",\n    \"description\": \"70% progress\",\n    \"code\": \"import React from \\\"react\\\";\\nimport ProgressBar from \\\"react-lib-nikmargit/ProgressBar\\\";\\n\\n/** 70% progress */\\nexport default function Example70Percent() {\\n  return <ProgressBar percent={70} width={150} />;\\n}\\n\"\n  }]\n}, {\n  \"name\": \"RegistrationForm\",\n  \"description\": \"Registration form with built-in validation.\",\n  \"props\": {\n    \"confirmationMessage\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Message displayed upon successful submission\",\n      \"defaultValue\": {\n        \"value\": \"\\\"Thanks for registering!\\\"\",\n        \"computed\": false\n      }\n    },\n    \"onSubmit\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Called when form is submitted\"\n    },\n    \"minPasswordLength\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Minimum password length\",\n      \"defaultValue\": {\n        \"value\": \"8\",\n        \"computed\": false\n      }\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\nimport PropTypes from \\\"prop-types\\\";\\nimport TextInput from \\\"../TextInput\\\";\\nimport PasswordInput from \\\"../PasswordInput\\\";\\n\\n/** Registration form with built-in validation. */\\nclass RegistrationForm extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n    this.state = {\\n      user: {\\n        email: \\\"\\\",\\n        password: \\\"\\\"\\n      },\\n      errors: {},\\n      submitted: false\\n    };\\n  }\\n\\n  onChange = event => {\\n    const user = this.state.user;\\n    user[event.target.name] = event.target.value;\\n    this.setState({ user });\\n  };\\n\\n  // Returns a number from 0 to 100 that represents password quality.\\n  // For simplicity, just returning % of min length entered.\\n  // Could enhance with checks for number, special char, unique characters, etc.\\n  passwordQuality(password) {\\n    if (!password) return null;\\n    if (password.length >= this.props.minPasswordLength) return 100;\\n    const percentOfMinLength = parseInt(\\n      (password.length / this.props.minPasswordLength) * 100,\\n      10\\n    );\\n    return percentOfMinLength;\\n  }\\n\\n  validate({ email, password }) {\\n    const errors = {};\\n    const { minPasswordLength } = this.props;\\n\\n    if (!email) errors.email = \\\"Email required.\\\";\\n    if (password.length < minPasswordLength)\\n      errors.password = `Password must be at least ${minPasswordLength} characters.`;\\n\\n    this.setState({ errors });\\n    const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\\n    return formIsValid;\\n  }\\n\\n  onSubmit = () => {\\n    const { user } = this.state;\\n    const formIsValid = this.validate(user);\\n    if (formIsValid) {\\n      this.props.onSubmit(user);\\n      this.setState({ submitted: true });\\n    }\\n  };\\n\\n  render() {\\n    const { errors, submitted } = this.state;\\n    const { email, password } = this.state.user;\\n\\n    return submitted ? (\\n      <h2>{this.props.confirmationMessage}</h2>\\n    ) : (\\n      <div>\\n        <TextInput\\n          htmlId=\\\"registration-form-email\\\"\\n          name=\\\"email\\\"\\n          onChange={this.onChange}\\n          label=\\\"Email\\\"\\n          value={email}\\n          error={errors.email}\\n          required\\n        />\\n\\n        <PasswordInput\\n          htmlId=\\\"registration-form-password\\\"\\n          name=\\\"password\\\"\\n          value={password}\\n          onChange={this.onChange}\\n          quality={this.passwordQuality(password)}\\n          showVisibilityToggle\\n          maxLength={50}\\n          error={errors.password}\\n        />\\n\\n        <input type=\\\"submit\\\" value=\\\"Register\\\" onClick={this.onSubmit} />\\n      </div>\\n    );\\n  }\\n}\\n\\nRegistrationForm.propTypes = {\\n  /** Message displayed upon successful submission */\\n  confirmationMessage: PropTypes.string,\\n\\n  /** Called when form is submitted */\\n  onSubmit: PropTypes.func.isRequired,\\n\\n  /** Minimum password length */\\n  minPasswordLength: PropTypes.number\\n};\\n\\nRegistrationForm.defaultProps = {\\n  confirmationMessage: \\\"Thanks for registering!\\\",\\n  minPasswordLength: 8\\n};\\n\\nexport default RegistrationForm;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleAllFeatures\",\n    \"description\": \"\",\n    \"code\": \"import React from \\\"react\\\";\\nimport RegistrationForm from \\\"react-lib-nikmargit/RegistrationForm\\\";\\n\\nexport default class ExampleRegistrationForm extends React.Component {\\n  onSubmit = user => {\\n    console.log(user);\\n  };\\n\\n  render() {\\n    return <RegistrationForm onSubmit={this.onSubmit} />;\\n  }\\n}\\n\"\n  }]\n}, {\n  \"name\": \"TextInput\",\n  \"description\": \"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input name. Recommend setting this to match object's property so a single change handler can be used.\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input label\"\n    },\n    \"type\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"\\\"text\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"number\\\"\",\n          \"computed\": false\n        }, {\n          \"value\": \"\\\"password\\\"\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Input type\",\n      \"defaultValue\": {\n        \"value\": \"\\\"text\\\"\",\n        \"computed\": false\n      }\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Mark label with asterisk if set to true\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function to call onChange\"\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder to display when empty\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Value\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"String to display when error occurs\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Child component to display next to the input\"\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\nimport PropTypes from \\\"prop-types\\\";\\nimport Label from \\\"../Label\\\";\\n\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\nfunction TextInput({\\n  htmlId,\\n  name,\\n  label,\\n  type = \\\"text\\\",\\n  required = false,\\n  onChange,\\n  placeholder,\\n  value,\\n  error,\\n  children,\\n  ...props\\n}) {\\n  return (\\n    <div style={{ marginBottom: 16 }}>\\n      <Label htmlFor={htmlId} label={label} required={required} />\\n      <input\\n        id={htmlId}\\n        type={type}\\n        name={name}\\n        placeholder={placeholder}\\n        value={value}\\n        onChange={onChange}\\n        style={error && { border: \\\"solid 1px red\\\" }}\\n        {...props}\\n      />\\n      {children}\\n      {error && (\\n        <div className=\\\"error\\\" style={{ color: \\\"red\\\" }}>\\n          {error}\\n        </div>\\n      )}\\n    </div>\\n  );\\n}\\n\\nTextInput.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\n  name: PropTypes.string.isRequired,\\n\\n  /** Input label */\\n  label: PropTypes.string.isRequired,\\n\\n  /** Input type */\\n  type: PropTypes.oneOf([\\\"text\\\", \\\"number\\\", \\\"password\\\"]),\\n\\n  /** Mark label with asterisk if set to true */\\n  required: PropTypes.bool,\\n\\n  /** Function to call onChange */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Placeholder to display when empty */\\n  placeholder: PropTypes.string,\\n\\n  /** Value */\\n  value: PropTypes.any,\\n\\n  /** String to display when error occurs */\\n  error: PropTypes.string,\\n\\n  /** Child component to display next to the input */\\n  children: PropTypes.node\\n};\\n\\nexport default TextInput;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleError\",\n    \"description\": \"Required TextBox with error\",\n    \"code\": \"import React from \\\"react\\\";\\nimport TextInput from \\\"react-lib-nikmargit/TextInput\\\";\\n\\n/** Required TextBox with error */\\nexport default class ExampleError extends React.Component {\\n  render() {\\n    return (\\n      <TextInput\\n        htmlId=\\\"example-optional\\\"\\n        label=\\\"First Name\\\"\\n        name=\\\"firstname\\\"\\n        onChange={() => {}}\\n        required\\n        error=\\\"First name is required.\\\"\\n      />\\n    );\\n  }\\n}\\n\"\n  }, {\n    \"name\": \"ExampleOptional\",\n    \"description\": \"Optional TextBox\",\n    \"code\": \"import React from \\\"react\\\";\\nimport TextInput from \\\"react-lib-nikmargit/TextInput\\\";\\n\\n/** Optional TextBox */\\nexport default class ExampleOptional extends React.Component {\\n  render() {\\n    return (\\n      <TextInput\\n        htmlId=\\\"example-optional\\\"\\n        label=\\\"First Name\\\"\\n        name=\\\"firstname\\\"\\n        onChange={() => {}}\\n      />\\n    );\\n  }\\n}\\n\"\n  }]\n}];","import React from \"react\";\nimport EyeIcon from \"react-lib-nikmargit/EyeIcon\";\n\nexport default function EyeIconExample() {\n  return <EyeIcon />;\n}\n","import React from \"react\";\nimport Label from \"react-lib-nikmargit/Label\";\n\n/** Optional label */\nexport default function ExampleOptional() {\n  return <Label htmlFor=\"test\" label=\"test\" />;\n}\n","import React from \"react\";\nimport Label from \"react-lib-nikmargit/Label\";\n\n/** Required label */\nexport default function ExampleRequired() {\n  return <Label htmlFor=\"test\" label=\"test\" required />;\n}\n","import React from \"react\";\nimport PasswordInput from \"react-lib-nikmargit/PasswordInput\";\n\n/** All features enabled */\nclass ExampleAllFeatures extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      password: \"\"\n    };\n  }\n\n  getQuality() {\n    const length = this.state.password.length;\n    return length > 10 ? 100 : length * 10;\n  }\n\n  render() {\n    return (\n      <div>\n        <PasswordInput\n          htmlId=\"password-input-example-all-features\"\n          name=\"password\"\n          onChange={event => this.setState({ password: event.target.value })}\n          value={this.state.password}\n          minLength={8}\n          placeholder=\"Enter password\"\n          showVisibilityToggle\n          quality={this.getQuality()}\n          {...this.props}\n        />\n      </div>\n    );\n  }\n}\n\nexport default ExampleAllFeatures;\n","import React from \"react\";\nimport ProgressBar from \"react-lib-nikmargit/ProgressBar\";\n\n/** 100% progress and height 20px */\nexport default function Example100Percent() {\n  return <ProgressBar percent={100} width={150} height={20} />;\n}\n","import React from \"react\";\nimport ProgressBar from \"react-lib-nikmargit/ProgressBar\";\n\n/** 10% progress */\nexport default function Example10Percent() {\n  return <ProgressBar percent={10} width={150} />;\n}\n","import React from \"react\";\nimport ProgressBar from \"react-lib-nikmargit/ProgressBar\";\n\n/** 70% progress */\nexport default function Example70Percent() {\n  return <ProgressBar percent={70} width={150} />;\n}\n","import React from \"react\";\nimport TextInput from \"react-lib-nikmargit/TextInput\";\n\n/** Required TextBox with error */\nexport default class ExampleError extends React.Component {\n  render() {\n    return (\n      <TextInput\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n        required\n        error=\"First name is required.\"\n      />\n    );\n  }\n}\n","import React from \"react\";\nimport TextInput from \"react-lib-nikmargit/TextInput\";\n\n/** Optional TextBox */\nexport default class ExampleOptional extends React.Component {\n  render() {\n    return (\n      <TextInput\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n      />\n    );\n  }\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction HelloWorld({ message }) {\n  return <div>Hello {message}</div>;\n}\n\nHelloWorld.propTypes = {\n  /** Message to display */\n  message: PropTypes.string\n};\n\nHelloWorld.defaultProps = {\n  /** Message to display */\n  message: \"World\"\n};\n\nexport default HelloWorld;\n","import React from \"react\";\n\nimport HelloWorld from \"react-lib-nikmargit/HelloWorld\";\n\n/**\n * Custom message\n */\nexport default function ExampleHelloWorld() {\n  return <HelloWorld message=\"this is a test\"></HelloWorld>;\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport TextInput from \"../TextInput\";\nimport PasswordInput from \"../PasswordInput\";\n\n/** Registration form with built-in validation. */\nclass RegistrationForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      user: {\n        email: \"\",\n        password: \"\"\n      },\n      errors: {},\n      submitted: false\n    };\n  }\n\n  onChange = event => {\n    const user = this.state.user;\n    user[event.target.name] = event.target.value;\n    this.setState({ user });\n  };\n\n  // Returns a number from 0 to 100 that represents password quality.\n  // For simplicity, just returning % of min length entered.\n  // Could enhance with checks for number, special char, unique characters, etc.\n  passwordQuality(password) {\n    if (!password) return null;\n    if (password.length >= this.props.minPasswordLength) return 100;\n    const percentOfMinLength = parseInt(\n      (password.length / this.props.minPasswordLength) * 100,\n      10\n    );\n    return percentOfMinLength;\n  }\n\n  validate({ email, password }) {\n    const errors = {};\n    const { minPasswordLength } = this.props;\n\n    if (!email) errors.email = \"Email required.\";\n    if (password.length < minPasswordLength)\n      errors.password = `Password must be at least ${minPasswordLength} characters.`;\n\n    this.setState({ errors });\n    const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\n    return formIsValid;\n  }\n\n  onSubmit = () => {\n    const { user } = this.state;\n    const formIsValid = this.validate(user);\n    if (formIsValid) {\n      this.props.onSubmit(user);\n      this.setState({ submitted: true });\n    }\n  };\n\n  render() {\n    const { errors, submitted } = this.state;\n    const { email, password } = this.state.user;\n\n    return submitted ? (\n      <h2>{this.props.confirmationMessage}</h2>\n    ) : (\n      <div>\n        <TextInput\n          htmlId=\"registration-form-email\"\n          name=\"email\"\n          onChange={this.onChange}\n          label=\"Email\"\n          value={email}\n          error={errors.email}\n          required\n        />\n\n        <PasswordInput\n          htmlId=\"registration-form-password\"\n          name=\"password\"\n          value={password}\n          onChange={this.onChange}\n          quality={this.passwordQuality(password)}\n          showVisibilityToggle\n          maxLength={50}\n          error={errors.password}\n        />\n\n        <input type=\"submit\" value=\"Register\" onClick={this.onSubmit} />\n      </div>\n    );\n  }\n}\n\nRegistrationForm.propTypes = {\n  /** Message displayed upon successful submission */\n  confirmationMessage: PropTypes.string,\n\n  /** Called when form is submitted */\n  onSubmit: PropTypes.func.isRequired,\n\n  /** Minimum password length */\n  minPasswordLength: PropTypes.number\n};\n\nRegistrationForm.defaultProps = {\n  confirmationMessage: \"Thanks for registering!\",\n  minPasswordLength: 8\n};\n\nexport default RegistrationForm;\n","import React from \"react\";\nimport RegistrationForm from \"react-lib-nikmargit/RegistrationForm\";\n\nexport default class ExampleRegistrationForm extends React.Component {\n  onSubmit = user => {\n    console.log(user);\n  };\n\n  render() {\n    return <RegistrationForm onSubmit={this.onSubmit} />;\n  }\n}\n","var map = {\n\t\"./EyeIcon/Example\": 15,\n\t\"./EyeIcon/Example.js\": 15,\n\t\"./HelloWorld/ExampleHelloWorld\": 24,\n\t\"./HelloWorld/ExampleHelloWorld.js\": 24,\n\t\"./Label/LabelOptional\": 16,\n\t\"./Label/LabelOptional.js\": 16,\n\t\"./Label/LabelRequired\": 17,\n\t\"./Label/LabelRequired.js\": 17,\n\t\"./PasswordInput/ExampleAllFeatures\": 18,\n\t\"./PasswordInput/ExampleAllFeatures.js\": 18,\n\t\"./ProgressBar/Example100Percent\": 19,\n\t\"./ProgressBar/Example100Percent.js\": 19,\n\t\"./ProgressBar/Example10Percent\": 20,\n\t\"./ProgressBar/Example10Percent.js\": 20,\n\t\"./ProgressBar/Example70Percent\": 21,\n\t\"./ProgressBar/Example70Percent.js\": 21,\n\t\"./RegistrationForm/ExampleAllFeatures\": 25,\n\t\"./RegistrationForm/ExampleAllFeatures.js\": 25,\n\t\"./TextInput/ExampleError\": 22,\n\t\"./TextInput/ExampleError.js\": 22,\n\t\"./TextInput/ExampleOptional\": 23,\n\t\"./TextInput/ExampleOptional.js\": 23\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 34;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Navigation = ({components}) => {\n  return (\n    <ul className=\"navigation\">\n      {\n        components.map( name => {\n          return (\n            <li key={name}>\n              <a href={`#${name}`}>{name}</a>\n            </li>\n          )\n        })\n      }\n    </ul>\n  )\n}\n\nNavigation.propTypes = {\n  components: PropTypes.array.isRequired\n};\n\nexport default Navigation;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport hljs from \"highlight.js/lib/highlight\";\nimport javascript from \"highlight.js/lib/languages/javascript\";\n\nclass CodeExample extends React.Component {\n  componentDidMount() {\n    hljs.registerLanguage(\"javascript\", javascript);\n    hljs.highlightBlock(this.element);\n  }\n\n  render() {\n    return (\n      <pre\n        ref={ref => {\n          this.element = ref;\n        }}\n      >\n        <code>{this.props.children}</code>\n      </pre>\n    );\n  }\n}\n\nCodeExample.propTypes = {\n  children: PropTypes.string.isRequired\n};\n\nexport default CodeExample;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport CodeExample from \"./CodeExample\";\n\nclass Example extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { showCode: false };\n  }\n\n  toggleCode = event => {\n    event.preventDefault();\n    this.setState(prevState => {\n      return { showCode: !prevState.showCode };\n    });\n  };\n\n  render() {\n    const { showCode } = this.state;\n    const { code, description, name } = this.props.example;\n    // Must use CommonJS require to dynamically require because ES Modules must be statically analyzable.\n    const ExampleComponent = require(`./examples/${this.props.componentName}/${name}`)\n      .default;\n    return (\n      <div className=\"example\">\n        {description && <h4>{description}</h4>}\n\n        <ExampleComponent />\n\n        <p>\n          <button onClick={this.toggleCode}>\n            {showCode ? \"Hide\" : \"Show\"} Code\n          </button>\n        </p>\n\n        {showCode && <CodeExample>{code}</CodeExample>}\n      </div>\n    );\n  }\n}\n\nExample.propTypes = {\n  example: PropTypes.object.isRequired,\n  componentName: PropTypes.string.isRequired\n};\n\nexport default Example;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Props = ({ props }) => {\n  return (\n    <table className=\"props\">\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Description</th>\n          <th>Type</th>\n          <th>Default</th>\n          <th>Required</th>\n        </tr>\n      </thead>\n      <tbody>\n        {Object.keys(props).map(key => {\n          return (\n            <tr key={key}>\n              <td>{key}</td>\n              <td>{props[key].description}</td>\n              <td>{props[key].type.name}</td>\n              <td>\n                {props[key].defaultValue && props[key].defaultValue.value}\n              </td>\n              <td>{props[key].required && \"X\"}</td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\nProps.propTypes = {\n  props: PropTypes.object.isRequired\n};\n\nexport default Props;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Example from \"./Example\";\nimport Props from \"./Props\";\n\nconst ComponentPage = ({ component }) => {\n  const { name, description, props, examples } = component;\n\n  return (\n    <div className=\"componentpage\">\n      <h2>{name}</h2>\n      <p>{description}</p>\n\n      <h3>Example{examples.length > 1 && \"s\"}</h3>\n      {examples.length > 0\n        ? examples.map(example => (\n            <Example\n              key={example.name}\n              example={example}\n              componentName={name}\n            />\n          ))\n        : \"No examples exist.\"}\n\n      <h3>Props</h3>\n      {props ? <Props props={props} /> : \"This component accepts no props.\"}\n    </div>\n  );\n};\n\nComponentPage.propTypes = {\n  component: PropTypes.object.isRequired\n};\n\nexport default ComponentPage;\n","import React from \"react\";\nimport Navigation from \"./Navigation\";\nimport ComponentPage from \"./ComponentPage\";\nimport componentData from \"../../config/componentData\";\n\nexport default class Docs extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      route: window.location.hash.substr(1)\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"hashchange\", () => {\n      this.setState({ route: window.location.hash.substr(1) });\n    });\n  }\n\n  render() {\n    const { route } = this.state;\n    const component = route\n      ? componentData.filter(component => component.name === route)[0]\n      : componentData[0];\n\n    return (\n      <div>\n        <Navigation\n          components={componentData.map(component => component.name)}\n        />\n        <ComponentPage component={component} />\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Docs from \"./docs/Docs\";\nimport \"../node_modules/highlight.js/styles/ocean.css\";\n\nReactDOM.render(<Docs />, document.getElementById(\"root\"));\n"],"sourceRoot":""}